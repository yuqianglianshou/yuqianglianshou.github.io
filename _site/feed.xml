<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>劉清揚</title>
    <description>欢迎来到我的个人站~</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 04 Mar 2024 11:55:33 +0800</pubDate>
    <lastBuildDate>Mon, 04 Mar 2024 11:55:33 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
    <item>
      <title>so-vits-svc 执行笔记</title>
      <description>&lt;h3 id=&quot;风能否向月而行&quot;&gt;风能否向月而行。&lt;/h3&gt;

&lt;h2 id=&quot;相关教程和参考资料&quot;&gt;相关教程和参考资料&lt;/h2&gt;

&lt;p&gt;so-vits-svc 项目地址： &lt;a href=&quot;https://github.com/svc-develop-team/so-vits-svc.git&quot;&gt;https://github.com/svc-develop-team/so-vits-svc.git&lt;/a&gt; &lt;br /&gt;
官方 README 文档：&lt;a href=&quot;https://github.com/svc-develop-team/so-vits-svc/blob/4.1-Stable/README_zh_CN.md&quot;&gt;https://github.com/svc-develop-team/so-vits-svc/blob/4.1-Stable/README_zh_CN.md&lt;/a&gt;&lt;br /&gt;
B 站 up Sucial的非常详细的教学视频： &lt;a href=&quot;https://www.bilibili.com/video/BV1Hr4y197Cy?p=1&amp;amp;vd_source=98a6ce1d2586467c3641a8b5aac049ed&quot;&gt;https://www.bilibili.com/video/BV1Hr4y197Cy?p=1&amp;amp;vd_source=98a6ce1d2586467c3641a8b5aac049ed&lt;/a&gt;&lt;br /&gt;
教学视频的笔记： &lt;a href=&quot;https://github.com/SUC-DriverOld/so-vits-svc-Chinese-Detaild-Documents?tab=readme-ov-file&quot;&gt;https://github.com/SUC-DriverOld/so-vits-svc-Chinese-Detaild-Documents?tab=readme-ov-file&lt;/a&gt;&lt;br /&gt;
B 站 up Sucial的UVR5人声分离教程: &lt;a href=&quot;https://www.bilibili.com/video/BV1F4421c7qU/?vd_source=98a6ce1d2586467c3641a8b5aac049ed&quot;&gt;https://www.bilibili.com/video/BV1F4421c7qU/?vd_source=98a6ce1d2586467c3641a8b5aac049ed&lt;/a&gt;&lt;br /&gt;
一些报错的解决办法（来自 B 站 up：羽毛布団）: &lt;a href=&quot;https://www.bilibili.com/read/cv22206231/&quot;&gt;https://www.bilibili.com/read/cv22206231/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;关于环境配置&quot;&gt;关于环境配置&lt;/h2&gt;

&lt;p&gt;需要 显存 6G+，并设置虚拟内存 20G+；&lt;/p&gt;

&lt;p&gt;需要 NVIDIA-CUDA，版本11或版本12，请安装。&lt;br /&gt;
查看cuda 版本&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nvcc -V   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/images/posts/20240221/6.jpg&quot; alt=&quot;&quot; width=&quot;90%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;需要 安装 visual studio 2022，组件里装“使用 c++的桌面开发”。否则依赖包 fairseq 会安装失败。&lt;/p&gt;

&lt;p&gt;需要环境管理系统 conda，请安装。&lt;/p&gt;

&lt;p&gt;源码下载4.1-Stable稳定版 &lt;a href=&quot;https://github.com/svc-develop-team/so-vits-svc.git&quot;&gt;https://github.com/svc-develop-team/so-vits-svc.git&lt;/a&gt;&lt;br /&gt;
vsCode 打开项目，在控制台使用 conda 创建虚拟环境，并启用&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//创建名称为 env_so_vits_svc 的虚拟环境并安装python 3.9版本。  
conda create -n env_so_vits_svc python=3.9  
//查看是否创建成功
conda env list
//启用环境
conda activate env_so_vits_svc

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;修改 requirements_win.txt 文件，将 gradio&amp;gt;=3.7.0 改为 gradio==3.41.2，并添加三个依赖包 fastapi==0.84.0  pydantic==1.10.12  tensorflow&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gradio==3.41.2  
fastapi==0.84.0  
pydantic==1.10.12 
//用于辅助判断训练结果
tensorflow
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后安装依赖包 (windows)&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    pip install -r requirements_win.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;安装Pytorch， 版本要与CUDA对应，Pytorch 官网&lt;a href=&quot;https://pytorch.org/get-started/locally/&quot;&gt;https://pytorch.org/get-started/locally/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/images/posts/20240221/7.jpg&quot; alt=&quot;&quot; width=&quot;90%&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;conda install pytorch torchvision torchaudio pytorch-cuda=12.1 -c pytorch -c nvidia
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;验证是否安装成功&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    python
    # 回车运行
    import torch
    # 回车运行
    print(torch.__version__)
    # 回车运行
    print(torch.cuda.is_available())
    # 回车运行
    //最后一行出现True则成功，出现False则失败，需要重新安装.  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/images/posts/20240221/8.jpg&quot; alt=&quot;&quot; width=&quot;90%&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;音频数据集准备&quot;&gt;音频数据集准备&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;音频格式为wav，通过 Adobe Audition 的持续时间排序功能，删除时长 比较短的和比较长的，（回到原文件夹再次删除所有音频，由于Adobe Audition程序占用着没有删除的音频，从而无法删除占用音频，但是能够删除在Adobe Audition 中删除的音频，以此达到我们的过滤删除目的）每条时长在5s～15s之间最佳，过长容易爆内存，保留150条数据以上，然后拖拽所有文件到下方，选中所有，匹配响度。关闭Adobe Audition，保存所有。
&lt;br /&gt;
&lt;img src=&quot;/images/posts/20240221/1.jpg&quot; alt=&quot;&quot; width=&quot;90%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;回到原文件夹，删除因为匹配响度而产生的所有.pkf文件.&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/posts/20240221/11.jpg&quot; alt=&quot;&quot; width=&quot;90%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;将数据集放入项目中的 dataset_raw 目录，数据集以人名命名即可，不可为中文,原则上可同时训练多个人的声音模型，我同时训练了3个，出现了节奏不对的问题，不知道是否是因为同时训练产生的。建议单独训练，且训练1个和多个的时间是累加关系，所以同时训练多个并不会节省时间。
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; dataset_raw
 ├───speaker0
 │   ├───xxx1-xxx1.wav
 │   ├───...
 │   └───Lxx-0xx8.wav
 └───speaker1
     ├───xx2-0xxx2.wav
     ├───...
     └───xxx7-xxx007.wav
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;在dataset_raw下创建config.json文件。
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &quot;n_speakers&quot;: 1

 &quot;spk&quot;:{
     &quot;文件夹名字（不可为中文）&quot;: 0
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/images/posts/20240221/2.jpg&quot; alt=&quot;&quot; width=&quot;90%&quot; /&gt;  &lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;预先下载的模型文件&quot;&gt;预先下载的模型文件&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;使用 contentvec 作为声音编码器（默认且推荐）
下载 contentvec ：checkpoint_best_legacy_500.pt &lt;a href=&quot;https://ibm.ent.box.com/s/z1wgl1stco8ffooyatzdwsqn2psd9lrr&quot;&gt;https://ibm.ent.box.com/s/z1wgl1stco8ffooyatzdwsqn2psd9lrr&lt;/a&gt; 放在pretrain目录下.&lt;br /&gt;
 或者下载下面的 ContentVec，大小只有 199MB，但效果相同:&lt;br /&gt;
 contentvec ：hubert_base.pt &lt;a href=&quot;https://huggingface.co/lj1995/VoiceConversionWebUI/resolve/main/hubert_base.pt&quot;&gt;https://huggingface.co/lj1995/VoiceConversionWebUI/resolve/main/hubert_base.pt&lt;/a&gt; , 将文件名改为checkpoint_best_legacy_500.pt后，放在pretrain目录下.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;预训练底模文件： G_0.pth, D_0.pth 放在logs/44k目录下.&lt;br /&gt;
扩散模型预训练底模文件： model_0.pt 放在logs/44k/diffusion目录下.&lt;br /&gt;
&lt;a href=&quot;https://huggingface.co/Sucial/so-vits-svc4.1-pretrain_model&quot;&gt;https://huggingface.co/Sucial/so-vits-svc4.1-pretrain_model&lt;/a&gt;包含G_0.pth，D_0.pth，model_0.pt.s&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;程序执行&quot;&gt;程序执行&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;重采样至 44100Hz 单声道,添加–skip_loudnorm 跳过响度匹配步骤.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; python resample.py --skip_loudnorm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;执行成功后，.\dataset\44k 目录下将生成音频文件，如下图&lt;br /&gt;
 &lt;br /&gt;
 &lt;img src=&quot;/images/posts/20240221/3.jpg&quot; alt=&quot;&quot; width=&quot;90%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;自动划分训练集、验证集，以及自动生成配置文件，增加–vol_aug 参数使用响度嵌入。
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; python preprocess_flist_config.py --speech_encoder vec768l12 --vol_aug
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;运行完毕后 .\configs\ 目录下将生成 config.json 与 diffusion.yaml 文件&lt;br /&gt;
 此时可以在生成的 config.json 与 diffusion.yaml 修改部分参数&lt;br /&gt;
     keep_ckpts：训练时保留最后几个模型，0为保留所有，默认只保留最后3个。&lt;br /&gt;
     batch_size：单次训练加载到 GPU 的数据量，调整到低于显存容量的大小即可,默认是6，6g显存的需调为3比较好。&lt;/p&gt;

    &lt;p&gt;如下图&lt;br /&gt;
 &lt;br /&gt;
 &lt;img src=&quot;/images/posts/20240221/4.jpg&quot; alt=&quot;&quot; width=&quot;90%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;生成 hubert 与 f0。尚若需要浅扩散功能（可选），需要增加–use_diff 参数.执行需要一定时间。&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; python preprocess_hubert_f0.py --f0_predictor dio --use_diff
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;执行成功后，每个音频文件都生成了5个相关的文件，如下图&lt;br /&gt;
 &lt;br /&gt;
 &lt;img src=&quot;/images/posts/20240221/5.jpg&quot; alt=&quot;&quot; width=&quot;90%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;主模型训练，需要5万步起，至少训练36小时，可ctrl+c中断，继续训练再次执行命令即可。&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; python train.py -c configs/config.json -m 44k
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;扩散模型训练（可选），测试效果：我没听出来有啥变化。&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; python train_diff.py -c configs/diffusion.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;模型训练结束后，模型文件保存在logs/44k目录下，扩散模型在logs/44k/diffusion下。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;模型压缩/打包分享&lt;/p&gt;

    &lt;p&gt;生成的模型含有继续训练所需的信息。如果确认不再训练，可以移除模型中此部分信息，得到约 1/3 大小的最终模型。&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; python compress_model.py -c=&quot;configs/config.json&quot; -i=&quot;logs/44k/G_30400.pth&quot; -o=&quot;logs/44k/release.pth&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;训练结果的判断
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 启动 tensorboard ，命令行输入
python -m tensorboard.main --logdir=logs\44k
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;命令行返回一个本地地址，浏览器打开地址，需要等待训练200步之后才会出现表格。此时命令行窗口不能关闭。 
如何判断训练的差不多了？找到 loss 标签下的 loss/g/lf0，当图像趋于稳定的直线时，则说明训练的差不多了，此时去推理听一听结果在做判断。下图是训练十万步的结果。 
 &lt;br /&gt;
 &lt;img src=&quot;/images/posts/20240221/c.jpg&quot; alt=&quot;&quot; width=&quot;90%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;由于命令行开启 tensorboard 会占用命令行窗口，写一个 .bat 执行文件，专门用于打开tensorboard，命名为 启动tensorboard.bat 即可，放在项目根目录下，双击点开即可&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    chcp 65001
    @echo off

    echo 正在启动Tensorboard...
    echo 如果看到输出了一条网址（大概率是localhost:6006）就可以访问该网址进入Tensorboard了

    //D:\Anaconda\envs\env_so_vits_svc 替换这个地址为自己的conda环境地址
    D:\Anaconda\envs\env_so_vits_svc\python.exe -m tensorboard.main --logdir=logs\44k

    pause
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
    &lt;img src=&quot;/images/posts/20240221/e.jpg&quot; alt=&quot;&quot; width=&quot;90%&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;目标音频处理-uvr5工具&quot;&gt;目标音频处理 uvr5工具&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;原曲分离为 伴奏+带和声的人声 &lt;br /&gt;
method = MDX-Net，segment size = 512，overlap = 30
model = MDX23C-InstVoc HQ&lt;br /&gt;
 &lt;br /&gt;
 &lt;img src=&quot;/images/posts/20240221/9.jpg&quot; alt=&quot;&quot; width=&quot;90%&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;带和声的人声分离为 和声 + 人声（和声是否需要的问题）&lt;br /&gt;
method = VR Architecture，window size = 320，aggression setting = 5
model = 5_HP-Karaoke-UVR(激进)\model = 6_HP-Karaoke-UVR(平滑)
 &lt;br /&gt;
 &lt;img src=&quot;/images/posts/20240221/a.jpg&quot; alt=&quot;&quot; width=&quot;90%&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;人声去除混响 &lt;br /&gt;
method = VR Architecture，window size = 320，aggression setting = 5
model = UVR-De-Echo-Normal&lt;br /&gt;
勾选只要无混响的干声。
 &lt;br /&gt;
 &lt;img src=&quot;/images/posts/20240221/b.jpg&quot; alt=&quot;&quot; width=&quot;90%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;如果上述3步之后还存在明显的噪声，再选择UVR-DeNoice去噪。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;经过处理后最终得到 伴奏 + 干声。&lt;/p&gt;

&lt;h2 id=&quot;推理&quot;&gt;推理&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;使用以下命令打开 webui 界面,推理期间，此命令行窗口不能关闭。
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; python webUI.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;由于命令行开启 webui 界面会占用命令行窗口，写一个 .bat 执行文件，专门用于打开推理界面，命名为 启动 webui.bat 即可，放在项目根目录下，双击点开即可&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;     chcp 65001
     @echo off

     echo 初始化并启动WebUI……初次启动可能会花上较长时间
     echo WebUI运行过程中请勿关闭此窗口！

     //D:\Anaconda\envs\env_so_vits_svc 替换这个地址为自己的conda环境地址
     D:\Anaconda\envs\env_so_vits_svc\python.exe webUI.py

     pause
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;&lt;br /&gt;
 &lt;img src=&quot;/images/posts/20240221/d.jpg&quot; alt=&quot;&quot; width=&quot;90%&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;模型选择 .\logs\44k\G_步数.pth 文件，配置文件选择 .\configs\config.json&lt;br /&gt;
下面的音频选择 选择处理好的干声。&lt;br /&gt;
其他参数不需要动。&lt;/li&gt;
  &lt;li&gt;点击音频转换，生成推理后的音频。&lt;/li&gt;
  &lt;li&gt;通过其他软件比如 剪映 合成 推理后的音频 + 伴奏，完成。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;关于文字转音频，点击文字转音频，输入文本，勾选上方F0预测，点击转换即可。&lt;/p&gt;

&lt;h2 id=&quot;关于-conda&quot;&gt;关于 conda&lt;/h2&gt;

&lt;p&gt;Conda是一个开源的软件包管理系统和环境管理系统，用于安装和管理软件包及其依赖项。它最初是为Python语言设计的，但也可用于其他语言和工具。Conda允许用户轻松地创建、分享、管理和部署环境和软件包，使开发人员能够更有效地管理项目的依赖关系。&lt;/p&gt;

&lt;p&gt;Conda的主要特点包括：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;软件包管理：Conda可以安装、更新、卸载和管理软件包及其依赖项。&lt;/li&gt;
  &lt;li&gt;环境管理：Conda允许用户创建多个隔离的环境，每个环境都可以拥有不同版本的软件包，从而使得不同项目之间的依赖关系可以互相隔离，避免冲突。&lt;/li&gt;
  &lt;li&gt;跨平台性：Conda支持在不同的操作系统上运行，包括Windows、macOS和Linux。&lt;/li&gt;
  &lt;li&gt;开源和社区支持：Conda是开源的，有一个活跃的社区支持，用户可以分享和贡献软件包和环境。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;总的来说，Conda是一个强大而灵活的工具，可以帮助开发人员更轻松地管理项目的依赖关系，提高开发效率。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//conda 的版本查看
conda -V

//存在的conda环境查看，正在启用的环境会有*标。
conda info --envs
或者
conda envs list

//创建 名为 pytorch_gpu, python版本为3.9 的虚拟环境
conda create -n pytorch_gpu python=3.9 

//启用名为 pytorch_gpu 的环境，
conda activate pytorch_gpu 

//取消正在启用环境
conda deactivate

//删除创建的环境
conda env remove --name &amp;lt;环境名称&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt;&lt;/p&gt;
</description>
      <pubDate>Wed, 21 Feb 2024 00:00:00 +0800</pubDate>
      <link>http://localhost:4000/2024/02/so-vits-svc-%E6%89%A7%E8%A1%8C%E7%AC%94%E8%AE%B0/</link>
      <guid isPermaLink="true">http://localhost:4000/2024/02/so-vits-svc-%E6%89%A7%E8%A1%8C%E7%AC%94%E8%AE%B0/</guid>
        
      <category>技术_AI语音</category>
        
        
    </item>
    
    <item>
      <title>AI语音_知识点整理</title>
      <description>&lt;h3 id=&quot;乐观是极度的绝境之中唯一的武器也是最后的救命稻草&quot;&gt;乐观是极度的绝境之中唯一的武器，也是最后的救命稻草。&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;声音的基本属性：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;音色（Timbre）：音色是声音的质地或音质，是使不同乐器或人的声音听起来不同的特征。即使两个声音具有相同的音调（频率）和响度（振幅），它们的音色也可能不同。
    音色是由声波的谐波成分和频谱分布所决定的，不同乐器或声源产生的声波谐波成分和频谱分布不同，因此具有不同的音色。

音调（Pitch）：音调是声音的频率属性，表示声波振动的快慢程度。频率高的声音听起来比频率低的声音更尖锐。音调与声音的音高相关，高频率对应高音调，低频率对应低音调。
    在音乐中，音调通常与音符的高低对应，用来描述音符的音高。

响度（Loudness）：响度是声音的振幅或强度属性，表示声波振动的幅度大小，也称为音量。振幅大的声音听起来更响亮，振幅小的声音听起来更柔和。
    响度通常与声音的音量相关，较高的振幅对应更高的音量。在音乐中，响度常用来描述音符的强弱或音乐的整体音量。

    响度通常以分贝（dB）为单位进行描述，分贝是一种对声音强度的对数测量单位，它基于声压级（声压的对数比）来表示声音的相对强度。

    通常情况下，人类能够感知的响度范围非常广泛，从非常微弱的声音，比如安静的耳语（约20分贝），到非常响亮的声音，比如飞机发动机的轰鸣（约120分贝）。

    以下是一些常见的声音响度范围及其描述：

    0-20 分贝：极其安静，类似于安静的图书馆或夜晚的室外。
    20-40 分贝：安静，类似于低声细语或轻微的风声。
    40-60 分贝：一般的谈话声或办公室环境。
    60-80 分贝：相对较大的声音，如电视机声音、交通噪音或餐馆内的谈话声。
    80-100 分贝：较大的声音，如汽车喇叭声、音乐会的声音或运动场上的欢呼声。
    100-120 分贝：非常响亮的声音，如摩托车引擎声或工厂机器声。
    120 分贝以上：极端响亮的声音，如飞机发动机声、火箭发射声。
    响度的测量通常是以标准声压级（20微帕）作为基准。因此，一个声音的响度可以被描述为相对于标准声压级的对数比，并以分贝为单位。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;TTS 和 VITS 的区别&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;文本到语音（TTS）和Voice Inverse Text-to-Speech（VITS）是两种不同的语音合成方法，它们在原理和应用方面有一些显著的区别：

1. **输入数据**：
   - TTS：TTS系统接收文本作为输入，然后生成对应的语音输出。它将文本转换为声音，并通常包括文本预处理、语音合成和音频后处理等步骤。
   - VITS：VITS直接从声音信号到声音信号进行训练，跳过了中间的文本表示。它不需要文本输入，而是直接处理声音信号。

2. **训练方法**：
   - TTS：TTS系统通常使用文本语料库和对应的语音语料库进行训练。它需要大量的文本-语音配对数据来学习文本到语音的映射关系。
   - VITS：VITS训练的输入和输出都是声音信号，它可以直接从声音信号对之间的关系中学习，而无需使用文本-语音配对数据。

3. **应用场景**：
   - TTS：TTS系统通常用于将文本转换为语音，例如语音助手、语音播报、自动电话系统等应用。
   - VITS：VITS更适用于声音信号处理的任务，例如声音合成、声音增强、语音转换等应用。

4. **训练复杂度**：
   - TTS：由于TTS系统需要大量的文本-语音配对数据进行训练，因此其训练复杂度较高。
   - VITS：VITS不需要文本-语音配对数据，可以直接从声音信号中学习，因此其训练复杂度较低。

总的来说，TTS和VITS是两种不同的语音合成方法，它们在输入数据、训练方法、应用场景和训练复杂度等方面有所不同，可以根据具体的需求选择合适的方法。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Github 项目 vits&lt;/strong&gt;   &lt;a href=&quot;https://github.com/jaywalnut310/vits&quot;&gt;GitHub地址：https://github.com/jaywalnut310/vits&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
VITS 是 https://github.com/RVC-Boss/GPT-SoVITS 的基础框架。 

VITS是一种基于自注意力机制（self-attention）的声音合成方法。以下是该项目的基本原理：

1. **自注意力机制（Self-Attention）**：自注意力机制是一种用于处理序列数据的机制，它可以根据输入序列中各个元素之间的关系来动态地调整每个元素的权重。
在语音合成中，自注意力机制可以帮助模型捕捉声音信号中不同部分之间的相关性和依赖关系。

2. **声音合成**：VITS是一种端到端的声音合成方法，它直接从声音信号到声音信号进行训练和生成，跳过了中间的文本表示。这种方法可以更好地保留声音的特征和表达，
从而产生更加自然和高质量的声音合成结果。

3. **模型架构**：VITS模型使用了自注意力机制来建模声音信号之间的长距离依赖关系，并通过学习声音信号的高级表示来实现声音合成。该模型可能包括编码器和解码器部分，
编码器负责将输入声音信号编码为高级表示，而解码器则负责根据这些表示生成输出声音信号。

4. **训练方法**：VITS模型可能使用了大量的声音信号数据进行训练，通过最小化声音合成时的预测误差来优化模型参数。训练过程可能会使用自注意力机制和梯度下降等技术来实现。

通过以上原理，VITS能够实现高质量的端到端声音合成，无需依赖于中间的文本表示，适用于多种语音合成和声音处理任务。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Github 项目 ar-vits&lt;/strong&gt;  &lt;a href=&quot;https://github.com/innnky/ar-vits&quot;&gt;GitHub地址：https://github.com/innnky/ar-vits&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
AutoRegressive-VITS（自回归-VITS）

AR-VITS 是 https://github.com/RVC-Boss/GPT-SoVITS 的基础框架。 

AR-VITS是一种用于声音合成的模型。以下是该项目的基本原理：

1. **AutoRegressive (AR)**：
AutoRegressive是指使用过去时间步的输出作为输入来预测下一个时间步的模型。在声音合成中，这意味着模型会考虑之前的声音样本来预测下一个时间步的声音。

1. **VITS**：
VITS是Voice Inverse Text-to-Speech的缩写，是一种端到端的声音合成方法。与传统的文本到语音（TTS）系统不同，VITS直接从声音信号到声音信号进行训练，
跳过了中间的文本表示。这种方法可以更好地保留声音的特征和表达。

结合两者，AR-VITS可能是一个结合了自回归模型和VITS方法的声音合成模型。它可能使用自回归模型来建模声音信号之间的时间依赖关系，
并结合VITS的思想来直接从声音信号到声音信号进行训练和生成，从而实现更加自然和高质量的声音合成。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Github 项目 hifi-gan&lt;/strong&gt;  &lt;a href=&quot;https://github.com/jik876/hifi-gan&quot;&gt;GitHub地址：https://github.com/jik876/hifi-gan&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://github.com/RVC-Boss/GPT-SoVITS 的声码器。 

HiFi-GAN 是一个基于生成对抗网络（GAN）的高保真度语音合成模型。以下是该项目的基本讲解：

1. **目标**：
HiFi-GAN旨在实现高保真度的语音合成，即生成具有高质量、高逼真度的语音信号，使其听起来与真实人类语音相似。

1. **生成对抗网络（GAN）**：
HiFi-GAN使用生成对抗网络（GAN）作为基础架构。GAN由两个主要部分组成：生成器（Generator）和判别器（Discriminator）。生成器负责生成高保真度的语音信号，
而判别器则负责区分生成的语音信号和真实的语音信号。通过对抗训练的方式，生成器逐渐学习生成高质量的语音信号，而判别器则逐渐学习提高其鉴别能力。
生成器是一个神经网络模型，它接收随机噪声作为输入，并尝试生成高保真度的语音信号。通常，生成器会使用深度卷积神经网络（CNN）或长短期记忆网络（LSTM）等结构来实现。
判别器也是一个神经网络模型，它接收两种输入：真实语音信号和生成器生成的合成语音信号。判别器的目标是区分这两种输入，并尽可能准确地判断生成的语音信号是否与真实语音信号相似。

1. **高保真度语音合成**：
HiFi-GAN采用了一系列技术和创新，包括使用长短期记忆（LSTM）或卷积神经网络（CNN）作为生成器的结构，引入了自适应特征正则化（Adaptive Feature Regularization）
等方法来提高合成语音的质量和逼真度。这些技术和方法帮助HiFi-GAN生成接近真实人类语音的高保真度语音信号。

1. **训练和优化**：
HiFi-GAN通过对真实语音数据进行训练，使用GAN的对抗训练方法来不断优化生成器和判别器的参数。训练过程中可能会使用一系列技巧和策略来提高模型的性能和收敛速度。

1. **应用场景**：
HiFi-GAN可以应用于多种语音合成和语音处理任务，包括语音合成、语音增强、语音转换等。它可以用于语音助手、语音合成系统、语音转文字等领域。

通过以上讲解，你可以了解到HiFi-GAN是一个基于GAN的高保真度语音合成模型，它通过对抗训练的方式来生成高质量、高逼真度的语音信号，适用于多种语音处理和合成任务。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Github 项目 SoundStorm&lt;/strong&gt;  &lt;a href=&quot;https://github.com/yangdongchao/SoundStorm&quot;&gt;GitHub地址：https://github.com/yangdongchao/SoundStorm&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
https://github.com/RVC-Boss/GPT-SoVITS 的类GPT（AR）模型 https://github.com/yangdongchao/SoundStorm/tree/master/soundstorm/s1/AR。 

SoundStorm是一个基于WaveNet的音频合成系统，它可以生成高质量的语音音频。以下是该项目的基本讲解：

1. **WaveNet模型**：
SoundStorm基于WaveNet模型，这是由DeepMind提出的一种深度生成模型，用于生成音频波形。WaveNet模型使用了深度卷积神经网络（CNN）结构，并且具有极高的参数效率，
能够生成高质量、高保真度的音频信号。

1. **自回归模型**：
WaveNet是一种自回归模型，它通过条件概率分布来建模音频波形的生成过程。具体来说，模型通过已知的音频序列来预测下一个样本点的值，然后将其作为输入，依次生成整个音频波形。

1. **音频合成**：
SoundStorm使用WaveNet模型来进行音频合成。给定输入的音频特征（如语音文本、音乐谱、或其他表示），WaveNet模型可以生成对应的高保真度音频波形。

1. **训练和优化**：
训练SoundStorm模型通常需要大量的音频数据，并且可能需要花费大量的时间和计算资源。在训练过程中，模型会通过最小化生成音频与真实音频之间的差异来优化参数。

1. **应用场景**：
SoundStorm可以应用于多种音频合成任务，包括语音合成、音乐合成、声音效果生成等。它可以用于语音合成系统、音乐生成器、声音特效软件等领域。

综上所述，SoundStorm是一个基于WaveNet的音频合成系统，利用WaveNet模型可以生成高质量、高保真度的音频波形，适用于多种音频合成任务。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Github 项目 chinese_speech_pretrain&lt;/strong&gt;  &lt;a href=&quot;https://github.com/TencentGameMate/chinese_speech_pretrain&quot;&gt;GitHub地址：https://github.com/TencentGameMate/chinese_speech_pretrain&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
https://github.com/RVC-Boss/GPT-SoVITS 的Hubert特征。 

chinese_speech_pretrain是腾讯游戏助手团队开发的一个中文语音预训练模型库，旨在提供中文语音相关的预训练模型和工具。以下是该项目的基本讲解：

1. **预训练模型**：
chinese_speech_pretrain提供了一系列中文语音相关的预训练模型，包括语音识别（ASR）、语音合成（TTS）、语音情感识别等模型。
这些预训练模型可以用于各种中文语音相关的任务和应用。

1. **模型结构**：
这些预训练模型可能基于深度学习技术，采用了各种不同的模型结构，如循环神经网络（RNN）、卷积神经网络（CNN）、自注意力机制（Self-Attention）等。
每个模型可能针对特定的任务和应用场景进行了优化和调整。

1. **数据集**：
为了训练这些预训练模型，可能使用了大量的中文语音数据集进行训练。这些数据集可能包括语音识别数据、语音合成数据、语音情感数据等，覆盖了多种不同的语音场景和语音内容。

1. **应用示例**：
chinese_speech_pretrain可能提供了一些示例代码和应用案例，帮助用户理解和使用预训练模型。这些示例代码可以用来进行语音识别、语音合成、语音情感识别等任务的实际操作和测试。

1. **开源社区**：
该项目可能是一个开源项目，允许用户参与到模型的开发和改进中，也可以通过GitHub等平台向开发团队提出问题和反馈建议。

综上所述，chinese_speech_pretrain是一个提供中文语音相关预训练模型和工具的开源项目，用户可以使用这些模型和工具来进行中文语音相关任务的研究和应用。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Github 项目 contentvec&lt;/strong&gt;  &lt;a href=&quot;https://github.com/auspicious3000/contentvec&quot;&gt;GitHub地址：https://github.com/auspicious3000/contentvec&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
https://github.com/RVC-Boss/GPT-SoVITS 的VC用的低音色特征。 

contentvec 是一个用于内容建模的开源库，它提供了一种简单而强大的方法来将文本转换为向量表示。以下是该项目的基本讲解：

1. **内容建模**：
contentvec 的主要目标是将文本内容转换为向量表示，从而实现内容建模。这种向量表示可以捕获文本的语义和语境信息，使得文本可以被更好地理解和处理。

1. **词向量化**：
contentvec 可能使用了词向量化（Word Embedding）技术，将文本中的单词或短语映射到高维向量空间中。通过词向量化，单词之间的语义关系可以在向量空间中得到体现，
从而可以进行更多的语义分析和推断。

1. **模型结构**：
contentvec 可能基于深度学习技术，采用了神经网络模型来学习文本的向量表示。这些模型可能包括循环神经网络（RNN）、卷积神经网络（CNN）、注意力机制（Attention）等结构，
以实现对文本内容的抽象和表示。

1. **训练数据**：
为了训练内容向量模型，contentvec 可能使用了大量的文本数据进行训练。这些数据可能包括各种不同领域和类型的文本，例如新闻文章、社交媒体文本、电子书籍等，
以覆盖尽可能多的语义和语境信息。

1. **应用场景**：
contentvec 的向量表示可以应用于多种文本相关的任务和应用，包括文本分类、情感分析、语义相似度计算、信息检索等。它可以用于搜索引擎、推荐系统、自然语言处理应用等领域。

综上所述，contentvec 是一个用于内容建模的开源库，通过将文本转换为向量表示来捕获文本的语义信息，以应用于各种文本相关的任务和应用中。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Github 项目 fish-speech&lt;/strong&gt;  &lt;a href=&quot;https://github.com/fishaudio/fish-speech&quot;&gt;GitHub地址：https://github.com/fishaudio/fish-speech&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
https://github.com/RVC-Boss/GPT-SoVITS 的概率分布采样 https://github.com/fishaudio/fish-speech/blob/main/tools/llama/generate.py#L41。 

fish-speech是一个基于Python的语音处理库，旨在提供简单易用的接口来进行语音信号的处理、分析和转换。以下是该项目的基本讲解：

1. **功能特性**：fish-speech提供了一系列功能丰富的工具和方法，用于处理语音信号。这些功能包括语音信号的读取和写入、频谱分析、声音特征提取、语音转换、语音识别等。

2. **支持格式**：fish-speech支持多种常见的语音文件格式，包括WAV、MP3、FLAC等，可以方便地读取和处理这些格式的语音文件。

3. **API接口**：fish-speech提供了简单易用的API接口，使得用户可以轻松地调用各种功能来处理语音信号。这些接口设计简洁清晰，方便用户理解和使用。

4. **应用示例**：该项目可能提供了一些示例代码和应用案例，帮助用户理解和使用fish-speech库。这些示例代码可以用来进行语音信号的处理、分析和转换，或者作为学习和参考的资源。

5. **开源社区**：fish-speech是一个开源项目，允许用户参与到开发和改进中，也可以通过GitHub等平台向开发团队提出问题和反馈建议。

综上所述，fish-speech是一个功能丰富的语音处理库，提供了简单易用的接口来进行语音信号的处理、分析和转换，适用于各种语音相关的应用和任务。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;在 Hugging Face 模型中心 chinese-roberta-wwm-ext-large&lt;/strong&gt;  &lt;a href=&quot;https://huggingface.co/hfl/chinese-roberta-wwm-ext-large&quot;&gt;GitHub地址：https://huggingface.co/hfl/chinese-roberta-wwm-ext-large&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
https://github.com/RVC-Boss/GPT-SoVITS 的中文BERT预训练特征。 

https://huggingface.co/hfl/chinese-roberta-wwm-ext-large 是一个在 Hugging Face 模型中心提供的中文 RoBERTa 预训练模型，
它基于 RoBERTa（Robustly optimized BERT approach）模型架构，并在中文语境下进行了预训练。以下是该模型的基本讲解：

1. **RoBERTa 模型**：
RoBERTa 是一个基于 BERT（Bidirectional Encoder Representations from Transformers）的改进模型，它采用了一系列优化策略来提升语言建模的性能和效果。
RoBERTa 在预训练阶段采用了更大的数据集、更长的训练时间和更多的训练步骤，以及一些其他的技术改进，从而在各种 NLP 任务上取得了优秀的性能。

2. **中文 RoBERTa 模型**：
https://huggingface.co/hfl/chinese-roberta-wwm-ext-large 是一个专门针对中文语境进行预训练的 RoBERTa 模型。它使用了来自中文语料库的大量文本数据进行预训练，
以学习中文语言的表示形式，并为各种中文 NLP 任务提供强大的特征表示。

3. **模型架构**：
该模型可能采用了 RoBERTa 的标准模型架构，包括多层的 Transformer 编码器（Transformer Encoder），每个编码器层由多头自注意力机制（Multi-Head Self-Attention）
和前馈神经网络组成。通过多层的堆叠，模型能够捕获输入文本的丰富语义信息。

4. **应用场景**：
中文 RoBERTa 模型可以应用于各种中文自然语言处理任务，包括文本分类、命名实体识别、情感分析、语义理解、文本生成等。它可以作为预训练模型在下游任务上进行微调，
也可以作为特征提取器来获取文本的表示形式。

5. **开源社区支持**：
该模型由 Hugging Face 提供，属于一个开源社区项目，用户可以通过 Hugging Face Transformers 库轻松地加载和使用该模型，
并结合其他工具和库进行各种 NLP 任务的开发和实验。

综上所述，https://huggingface.co/hfl/chinese-roberta-wwm-ext-large 是一个基于 RoBERTa 架构的中文预训练模型，适用于各种中文自然语言处理任务，
并由 Hugging Face 提供支持和维护。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Gradio&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Gradio是一个Python库，用于构建快速的机器学习界面。它允许用户将机器学习模型快速部署为易于使用的交互式界面，无需编写任何前端代码。Gradio提供了简单的API，
使得用户可以轻松地将模型部署为Web应用，以便用户可以通过浏览器与模型进行交互。

Gradio支持各种类型的输入和输出，包括文本、图像、音频、视频等。用户可以使用Gradio来构建各种不同类型的机器学习应用，例如图像分类、目标检测、文本生成、语音识别等。

Gradio提供了一个简单直观的界面，用户可以通过拖放或上传文件来输入数据，然后查看模型的预测结果。它还支持自定义界面布局、样式和交互逻辑，以满足不同应用的需求。

总之，Gradio是一个方便易用的工具，可以帮助用户快速构建和部署机器学习模型的交互式界面，使得模型的应用和使用更加简单和直观。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;PyTorch&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PyTorch是一个用于机器学习和深度学习的开源Python库，它提供了灵活而强大的工具和接口，用于构建和训练各种类型的神经网络模型。以下是关于PyTorch的一些重要特点和功能：

1. **动态计算图**：
PyTorch使用动态计算图来表示神经网络模型，这意味着计算图是在运行时构建的，允许用户使用Python的控制流结构（如循环和条件语句）来定义复杂的计算图。

2. **自动微分**：
PyTorch提供了自动微分功能，可以自动计算神经网络模型中参数的梯度，从而实现反向传播算法进行模型训练。这使得构建和训练神经网络模型变得更加简单和高效。

3. **模块化设计**：
PyTorch的设计是模块化的，提供了丰富的模块和函数，包括各种类型的神经网络层、损失函数、优化器等，可以方便地构建和定制神经网络模型。

4. **GPU加速**：
PyTorch支持在GPU上进行计算，可以利用GPU的并行计算能力加速模型训练和推断过程。用户可以轻松地将模型和数据移动到GPU上进行计算，从而提高计算性能。

5. **丰富的生态系统**：
PyTorch拥有一个庞大而活跃的社区，提供了丰富的资源和工具，包括预训练模型、数据集、教程、论坛等，使得用户可以快速上手并加速开发过程。

总的来说，PyTorch是一个强大而灵活的深度学习框架，具有动态计算图、自动微分、模块化设计、GPU加速等特点，适用于各种机器学习和深度学习任务。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
      <pubDate>Thu, 15 Feb 2024 00:00:00 +0800</pubDate>
      <link>http://localhost:4000/2024/02/AI%E8%AF%AD%E9%9F%B3_%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/</link>
      <guid isPermaLink="true">http://localhost:4000/2024/02/AI%E8%AF%AD%E9%9F%B3_%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/</guid>
        
      <category>技术_AI语音</category>
        
        
    </item>
    
    <item>
      <title>我的2023年终总结</title>
      <description>&lt;h3 id=&quot;我好像失去了什么又似乎什么也没有拥有过&quot;&gt;我好像失去了什么，又似乎什么也没有拥有过。&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt; 
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;我好像失去了什么，又似乎什么也没有拥有过。&lt;br /&gt;
我好像失去了什么，又似乎什么也没有拥有过。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt;&lt;/p&gt;
</description>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0800</pubDate>
      <link>http://localhost:4000/2024/01/%E6%88%91%E7%9A%842023%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</link>
      <guid isPermaLink="true">http://localhost:4000/2024/01/%E6%88%91%E7%9A%842023%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</guid>
        
      <category>人生</category>
        
        
    </item>
    
    <item>
      <title>移动开发的未来</title>
      <description>&lt;h3 id=&quot;风里有诗句&quot;&gt;风里有诗句。&lt;/h3&gt;

&lt;h2 id=&quot;什么是移动开发-下面是gpt给出的答案&quot;&gt;什么是移动开发？ 下面是GPT给出的答案。&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/images/posts/20230930/1.png&quot; alt=&quot;&quot; width=&quot;70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt; 
移动开发涉及的的细分领域有非常多，比如：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;原生、前端、后端开发。&lt;/li&gt;
  &lt;li&gt;混合开发和跨平台框架。&lt;/li&gt;
  &lt;li&gt;Framework和Kernel。&lt;/li&gt;
  &lt;li&gt;逆向安全。&lt;/li&gt;
  &lt;li&gt;音视频。&lt;/li&gt;
  &lt;li&gt;移动Web。&lt;/li&gt;
  &lt;li&gt;嵌入式。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;移动互联网的发展&quot;&gt;移动互联网的发展&lt;/h2&gt;

&lt;p&gt;2011年的互联网初露真容。微博已经成为最受欢迎的互联网产品，诞生的除了小米手机和微信，还有快手和知乎。&lt;br /&gt;
那时候每个人都认为在互联网公司工作是酷的，互联网人眼睛里只有硅谷，目标只有谷歌，没有写字楼，没有办公室格子间的挡板。卡座和抱着笔记本处处皆是工位的办公室，彰显着自由和创造力。没有复杂的层级和汇报关系，拥抱扁平化，没有办公室政治，不会仰赖权威和专家，而是崇尚自下而上的改变，崇尚平等和彼此认可，不会西装革履，不需要高大上的title，不会将老板和领导奉若神明，技术大牛和增长黑客才最受人尊敬。&lt;br /&gt;
那是互联网行业的青春期，每个人眼里都有光，每个人都是可能性的野兽，那年一本叫《人人都是产品经理》的职场工具书开始流行，产品经理成为每个年轻人梦想中的职业，程序员的心中充满了创业梦想。那年每个人都信奉雷军的那句话，站在风口上，猪都能飞起来。&lt;/p&gt;

&lt;p&gt;2014年阿里巴巴上市，上万名阿里员工一夜之间成为百万富翁，大众第一次感受到互联网造富力量之强大，互联网=财富 的等式成为显学，间接导致了之后的三年创业大跃进，无数有志青年投入了互联网的浪潮，坐进了海淀的创业咖啡馆，杭州的孵化器和上海的共享办公空间，投资人们闭着眼睛在支票簿上签字，无数的真金白银冲向了风口。&lt;/p&gt;

&lt;p&gt;2015年 o2o 百“团”大战，后续打车大战，外卖大战，共享单车大战，一场场战争，烧出了互联网人的高薪资，烧出了千万用户，百万日活，烧出了一轮又一轮的接盘价值。美团、小米、拼多多、快手陆续上市，无数财富梦想随之兑现。腾讯18周年，宣布全员持股100股，英雄联盟、阴阳师、王者荣耀，一次次刷新人们对年终奖的认知。程序员们用真金白银撑起了各地“硅谷”的房价，用购买力撑起了未来、理想和特斯拉的销量。&lt;/p&gt;

&lt;p&gt;2016年没有人再说今日头条是硅谷精神在中国的最后延续。&lt;/p&gt;

&lt;p&gt;2018年资本寒冬。&lt;/p&gt;

&lt;p&gt;2019年疫情。&lt;/p&gt;

&lt;p&gt;2020年7月20日这天，蚂蚁金服启动上市的消息传来，接下来就是杭州重点地段的房价应声而涨，后来，蚂蚁上市被叫停，监管重锤砸下互联网10年财富大梦，正如北岛的名句，如今我们深夜饮酒，杯子碰到一起都是梦破碎的声音。&lt;/p&gt;

&lt;p&gt;2023年，俯视着西二旗每天晚上忙碌的外卖小哥，8号、13号地铁上疲惫程序员，深夜穿梭在望京繁忙的网约车司机，互联网沉默了，是的，他闭嘴了，他不在张扬跋扈，他不在趾高气昂，他没了破坏现有游戏规则的能力，他不敢颠覆既得利益者，他屈服于财富面前，硅谷精神已荡然无存。&lt;/p&gt;

&lt;p&gt;夕阳西下，还有更多的求职人在天涯。&lt;/p&gt;

&lt;h2 id=&quot;移动开发&quot;&gt;移动开发&lt;/h2&gt;

&lt;p&gt;移动互联网的发展是移动开发的先决条件，据前辈们说2010年时会写一个xml都能找到android开发工作，而那时的主要问题是市场人才严重不足，于是移动开发的培训机构也如雨后春笋一般诞生，培训个几个月可能就能获得offer。辩证的说，培训机构的确大力的推动了中国移动互联网的发展，试想如果没有培训机构，在14、15年各种创业公司满天飞的时候，哪里去找那么多开发人员，我也得益于培训机构，学到了各种课程，现在b站、公众号、各种直播，甚至淘宝上有着数不尽的课程资源，选择性相当多，几乎不需要任何成本，这都得益于培训机构的发展与竞争。我记得我上大学那会，找点好的计算机的课程都是需要付费的，且选择性寥寥无几，没有现在的丰富资源，截几个b站上我经常看的某些up主的课程图，如下：&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/images/posts/20230930/2.png&quot; alt=&quot;&quot; width=&quot;70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/images/posts/20230930/3.png&quot; alt=&quot;&quot; width=&quot;70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/images/posts/20230930/4.png&quot; alt=&quot;&quot; width=&quot;70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;而这里不得不提的是中国大学教育的问题，学校知识体系落后于社会，没有改革动力，做吃山空，学生走出学校一无所会（除了顶级学府的、优秀的或者有资源的学生），培训机构也算是间接的补偿了计算机专业的一些教育问题。这也是他们能够发展壮大起来的一个原因。&lt;/p&gt;

&lt;p&gt;值得去关注的技术方向：&lt;/p&gt;

&lt;p&gt;AIGC+移动端&lt;br /&gt;
2023年的AIGC的火热空前绝后，它带来的影响是非常深远的，甚至能够变革整个互联网行业，很多产品可能将会以新的思路去重构和延伸，这里面就会产生相应的在移动端和AIGC结合相关产品和业务，公司层面也会有相应的投入意愿，这也许会给我们带来新的机会。&lt;/p&gt;

&lt;p&gt;元宇宙：VR/AR/XR&lt;br /&gt;
元宇宙虽然被炒概念，一直不温不火的，但这里面涉及的技术是比较前沿的，在游戏领域跟元宇宙的结合，如果能找到愿意投入企业，未尝不是一个不错的方向。&lt;/p&gt;

&lt;p&gt;IoT物联网&lt;br /&gt;
万物互联方向，比如智能家居，智能创新硬件产品，类似小米IoT相关的产品，智能手环、扫地机器人等等。这里面也有庞大的市场需求，另外软硬件结合对开发人员要求更高，更接近底层。&lt;/p&gt;

&lt;p&gt;新能源车载系统&lt;br /&gt;
新能源车的其中一个核心就是智能中控，比如特斯拉的中控系统是Linux，比亚迪还有蔚小理和大多数造车新势力用的是Android系统，这里面也有很多车载系统应用的需求，也是很多人都求职热门方向。&lt;/p&gt;

&lt;p&gt;音视频技术领域&lt;br /&gt;
当下流行的短视频，涉及到的核心就是音视频技术，有这方面的技术积累的同学应该也能获得不错的发展机会，而且这方面的人才相对而言比较稀缺。&lt;/p&gt;

&lt;p&gt;跨平台技术&lt;br /&gt;
从企业降本的角度，未来可能会更倾向招聘懂跨平台开发的，希望能统一技术栈能够实现多端发布的能力。比如Flutter、React Native、UniApp等。&lt;/p&gt;

&lt;p&gt;鸿蒙OS应用开发&lt;br /&gt;
国产替代是个很深远的话题，卡脖子问题现在越演越烈，从软件产业我们跟漂亮国还存在很多差距，我们需要正视这些差距并且迎头突围，这才是 正解。&lt;/p&gt;

&lt;h2 id=&quot;个人的一些思考&quot;&gt;个人的一些思考&lt;/h2&gt;

&lt;p&gt;移动互联网快速发展的因素 智能机的普及，资本的进入，移动互联网的优越性。&lt;/p&gt;

&lt;p&gt;要感谢小米雷总，没有2011年的小米手机，智能机不可能这么快的走进国民手中，当年小米手机的性价比不是盖的，他的出现，使得所有的山寨机没有了利润空间，直接宣告死亡，要知道那时候品牌机都是3、4千起步的，超高的利润率导致各行各业的资本大佬们都想进军手机行业，造个手机来卖卖，分一杯羹，像极了后来的造车风，技术之所以有壁垒是因为他打破了资本是万能的这条定律，而改变规则的小米手机，他打败了所有抱着财富梦想入局造手机的逐利者们。当然，老罗的锤子手机不算，那是情怀啊。&lt;/p&gt;

&lt;p&gt;关于优越性，我们只需想一个问题，八九十年代的生活和现在的生活有何区别。&lt;/p&gt;

&lt;p&gt;资本向来逐利，优越性产生需求，需求存在利益分配，有利可图，资本入场。&lt;/p&gt;

&lt;p&gt;三星手机世界销量前茅，在中国销声匿迹，不得不去思考一个问题，它的质量真的有问题么？三星手机消失后市场份额去了哪里？取而代之者是否给到了大众实在的利益呢？还是利用政治因素，国家情怀去搜刮大众利润呢？一家追求利润、利润率的公司企业，值得推崇、赞扬么？屠龙者终成恶龙会一次又一次的上演么？而有些龙的前身是狼啊，那时的狼已经在吃肉了啊。苹果手机也经历过和三星类似的事情，它现在仍然占有着绝对的份额，为何？它有着不可比拟的优势、不可或缺的价值么？答案是肯定的，不然也会销声匿迹吧。&lt;/p&gt;

&lt;p&gt;从历史进程和供需关系，可以看到移动开发的求职环境已经大不如前。&lt;/p&gt;

&lt;p&gt;手机上常用的App基本集中在我们耳熟能详的企业里面。其他的App要么访问量很少，要么永远消失在你的应用列表当中，App的消亡带来的就是移动端的夕阳西下。&lt;/p&gt;

&lt;p&gt;微信小程序出来后，原生开发被狠狠割裂了一把，不会开发小程序的不是合格的移动开发程序员。然后眼见一会儿鸿蒙 OS、一会儿澎湃 OS，再加上原来就有的 iOS，还好微软家的 WP 嗝屁了，反正越搞越割裂，后面眼见还有一个腾讯 OS，难了。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt;&lt;/p&gt;
</description>
      <pubDate>Sat, 30 Sep 2023 00:00:00 +0800</pubDate>
      <link>http://localhost:4000/2023/09/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91%E7%9A%84%E6%9C%AA%E6%9D%A5/</link>
      <guid isPermaLink="true">http://localhost:4000/2023/09/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91%E7%9A%84%E6%9C%AA%E6%9D%A5/</guid>
        
      <category>技术</category>
        
        
    </item>
    
    <item>
      <title>日记</title>
      <description>&lt;h3 id=&quot;我从未接受过现实我的思想一直活在虚构的世界里&quot;&gt;我从未接受过现实，我的思想一直活在虚构的世界里。&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;早上5点半，天亮了估计有半个小时了，昨天下了雨，凉爽的空气。&lt;br /&gt;
搬到通州北苑已经一个月有余，渐渐的熟悉了这里的环境。附近没有公园，也没有活动中心，只有万达那有个广场而已。&lt;br /&gt;
该去跑个步了，只能沿着公路跑，汽车尾气必然是差的，然而没有其他的办法。跟着音乐fade的节奏，气喘吁吁，一千米下来，以为能跑进4分30秒，结果还是超了，瞬间泄了气，走完了剩下的路程。&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/posts/20230723/1.jpeg&quot; alt=&quot;&quot; width=&quot;20%&quot; /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;终点是顺兴市场，去买点菜，未来几天的吃食安排上。可能来的些许早了，好多摊位还没有人，从市场里到路边摊，里里外外逛了一遍。没背包，着实勒的手疼。  &lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/posts/20230723/2.jpeg&quot; alt=&quot;&quot; width=&quot;20%&quot; /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;五花肉13一斤，我说来一斤半吧，给了我二斤多，28块，我笑笑付了款。新鲜的肋排很好，18一斤，买了肉，排骨只能往后排排了，主要还是做的不好吃，炖排骨要学习学习了，好想吃。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/images/posts/20230723/8.jpeg&quot; alt=&quot;&quot; width=&quot;20%&quot; /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;洗洗切了，分而装之，冻于冰箱中，下次直接取之即用，够吃好久了。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/images/posts/20230723/10.jpeg&quot; alt=&quot;&quot; width=&quot;20%&quot; /&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/posts/20230723/11.jpeg&quot; alt=&quot;&quot; width=&quot;20%&quot; /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;本想炒个葱头炒肉的菜，看了看切下来的肉皮，突然想吃了，于是煮之，切之，倒上酱油香油拌之，美味也，也许大多数人都没有见过这么吃肉皮的，或许很少有人会吃肉皮，但这对于小时候的我来说，可谓是开小灶了。&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/posts/20230723/9.jpeg&quot; alt=&quot;&quot; width=&quot;20%&quot; /&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/posts/20230723/12.jpeg&quot; alt=&quot;&quot; width=&quot;20%&quot; /&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/posts/20230723/14.jpeg&quot; alt=&quot;&quot; width=&quot;40%&quot; /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;在弄点肉炸个酱，就是炸酱面的那个酱，小葱蘸酱，美哉。&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/posts/20230723/13.jpeg&quot; alt=&quot;&quot; width=&quot;20%&quot; /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;桃子4块一斤，这是最便宜的了，还不错，挑了5个，花费10块6，一天一个。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/images/posts/20230723/3.jpeg&quot; alt=&quot;&quot; width=&quot;20%&quot; /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;玉米10块钱八根，这个买的不怎么样，有点老了，不如买那10块钱7根的了，贪小便宜了。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/images/posts/20230723/4.jpeg&quot; alt=&quot;&quot; width=&quot;40%&quot; /&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/posts/20230723/7.jpeg&quot; alt=&quot;&quot; width=&quot;20%&quot; /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;丝瓜6块一斤，着实感觉贵点了，但是喜欢吃，3根10块4，外加5块钱两把小葱。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/images/posts/20230723/5.jpeg&quot; alt=&quot;&quot; width=&quot;20%&quot; /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;还买了一个西瓜，1块钱一斤，还好挑了个小个的，8斤3两。还有一块儿10块钱的切糕。&lt;/p&gt;

&lt;p&gt;再蒸上一锅米饭，早饭好不丰盛。&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/posts/20230723/15.jpeg&quot; alt=&quot;&quot; width=&quot;20%&quot; /&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/posts/20230723/16.jpeg&quot; alt=&quot;&quot; width=&quot;40%&quot; /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;原来早上两个小时可以做好多事啊，好久好久没有珍惜早上的时光了。好久了。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
转载请注明：&lt;a href=&quot;http://yuqianglianshou.com&quot;&gt;劉清揚的博客&lt;/a&gt; » &lt;a href=&quot;http://yuqianglianshou.com/2023/07/日记/&quot;&gt; 日记 &lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
</description>
      <pubDate>Sun, 23 Jul 2023 00:00:00 +0800</pubDate>
      <link>http://localhost:4000/2023/07/%E6%97%A5%E8%AE%B0/</link>
      <guid isPermaLink="true">http://localhost:4000/2023/07/%E6%97%A5%E8%AE%B0/</guid>
        
      <category>人生</category>
        
        
    </item>
    
    <item>
      <title>跨域问题</title>
      <description>&lt;h3 id=&quot;吾尝终日而思矣不如须臾之所学&quot;&gt;吾尝终日而思矣，不如须臾之所学。&lt;/h3&gt;

&lt;h2 id=&quot;问题的由来&quot;&gt;问题的由来&lt;/h2&gt;
&lt;p&gt;发现了一个好玩的网页，解压放松型的， &lt;a href=&quot;https://aidn.jp/mikutap/&quot;&gt;https://aidn.jp/mikutap/&lt;/a&gt;,并找到了源码 &lt;a href=&quot;https://github.com/HFIProgramming/mikutap&quot;&gt;https://github.com/HFIProgramming/mikutap&lt;/a&gt;,很自然的，我要下载来运行看看，可以的话集成到自己的网页上。下载，然后浏览器打开，就报错了&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;index.html:1 Access to XMLHttpRequest at 'file:///Volumes/F/downloadchrome/mikutap-master/data/track/track.json' from origin 'null' 
has been blocked by CORS policy: Cross origin requests are only supported for protocol schemes: http, data, isolated-app, 
chrome-extension, chrome, https, chrome-untrusted.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/images/posts/kuayuwenti/1.png&quot; alt=&quot;&quot; width=&quot;90%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;原因及解析&quot;&gt;原因及解析&lt;/h2&gt;

&lt;p&gt;在浏览器打开本地的html文件， 上面请求的模型资源文件是一个本地文件， 协议是file://，如果是在服务器启动的话，则使用的是http或者https协议。
出于安全性考虑， Chrome默认禁止了这种用法，file协议和http/https协议不同，会被Chrome认为是跨域访问，所以会报被CORS(Cross-Origin Resource Sharing，跨域资源共享)的安全策略阻止。&lt;/p&gt;

&lt;h2 id=&quot;解决办法&quot;&gt;解决办法&lt;/h2&gt;

&lt;p&gt;先说一下这个问题只会发生在本地，如果是部署到服务器上面是没有问题的。网上的解决方案大多都是禁用Chrome的安全策略，我觉得不妥。有个简单的方法解决这个问题，下载vscode的一个插件，使用插件打开即可。插件叫 Live Server，搜索安装即可。&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/images/posts/kuayuwenti/2.png&quot; alt=&quot;&quot; width=&quot;90%&quot; /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;安装以后右击要打开的文件，选择 Open with Live Server 就可以了。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/images/posts/kuayuwenti/3.png&quot; alt=&quot;&quot; width=&quot;90%&quot; /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/images/posts/kuayuwenti/4.png&quot; alt=&quot;&quot; width=&quot;90%&quot; /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;用Live Server 打开之后浏览器上的地址是 http://127.0.0.1:5500/index.html&lt;/p&gt;

&lt;p&gt;而直接用浏览器打开的地址是本地的文件地址  file:///Volumes/F/downloadchrome/mikutap-master/index.html&lt;/p&gt;

&lt;p&gt;如此，一目了然。&lt;/p&gt;

&lt;p&gt;小游戏真的很有意思 &lt;a href=&quot;https://aidn.jp/mikutap/&quot;&gt;https://aidn.jp/mikutap/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
转载请注明：&lt;a href=&quot;http://yuqianglianshou.com&quot;&gt;劉清揚的博客&lt;/a&gt; » &lt;a href=&quot;http://yuqianglianshou.com/2023/07/跨域问题/&quot;&gt; 跨域问题 &lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
</description>
      <pubDate>Thu, 06 Jul 2023 00:00:00 +0800</pubDate>
      <link>http://localhost:4000/2023/07/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</link>
      <guid isPermaLink="true">http://localhost:4000/2023/07/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</guid>
        
      <category>技术</category>
        
        
    </item>
    
    <item>
      <title>AI语音mac踩坑记</title>
      <description>&lt;h3 id=&quot;原来你需要的不是答案而是时间&quot;&gt;原来你需要的不是答案，而是时间。&lt;/h3&gt;

&lt;p&gt;so-vits-svc是基于VITS的开源项目，VITS（Variational Inference with adversarial learning for end-to-end Text-to-Speech）是一种结合变分推理（variational inference）、标准化流（normalizing flows）和对抗训练的高表现力语音合成模型。&lt;/p&gt;

&lt;p&gt;基于Python3.10的开源库&lt;a href=&quot;https://github.com/svc-develop-team/so-vits-svc/tree/4.0-Vec768-Layer12&quot;&gt;so-vits-svc&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;踩坑记&quot;&gt;踩坑记&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;模型训练需要英伟达显卡，我的mac配置很高，没有。（如果已经获得模型文件，去运行推理是没有问题的）&lt;/li&gt;
  &lt;li&gt;电脑配置低，或者像我一样没有英伟达显卡的可以使用（不推荐）google的colab。有一定技术门槛，需要懂程序代码；需要翻墙；虽然免费但是每天有使用时长限制，我在模型训练运行中就直接给我断了。&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;人声伴奏分离不要使用 Spleeter，需要下载几个G的文件和模型，我使用后觉得效果很差。&lt;a href=&quot;https://vocalremover.org/&quot;&gt;https://vocalremover.org/&lt;/a&gt; 这个网站效果很好了，不用注册，简单易使用，几分钟搞定，如果想要专业点，使用UVR5 （Ultimate Vocal Remover），它目前是最优秀的人声伴奏分离工具之一，而且开源免费，开源地址：&lt;a href=&quot;https://github.com/Anjok07/ultimatevocalremovergui&quot;&gt;https://github.com/Anjok07/ultimatevocalremovergui&lt;/a&gt; ,windows和mac版本都有，也需要英伟达显卡，不过没有也可以用，就是差点意思。可以根据不同类型、乐器、背景音乐等去选择不同的算法，分离后的效果是不一样的，对于一般的歌曲来说差别似乎不是很大。需要时间去学习了解这个软件，追求高品质的同学要用它。这里有不错的介绍&lt;a href=&quot;https://www.bilibili.com/read/cv21997904&quot;&gt;最强 AI 人声伴奏分离工具 UVR5，更新5.5版本&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;底模文件直接去官网下载，放到代码指定目录中。&lt;/li&gt;
  &lt;li&gt;这个开源库（so-vits-svc）一直在更新，分支也有好几个了，请先仔细查看readme文档说明。&lt;/li&gt;
  &lt;li&gt;训练模型需要使用的音频文件质量很关键，直接影响模型质量，推理质量。宁缺毋滥。这是一项庞大的工作，要有耐心。&lt;/li&gt;
  &lt;li&gt;推理的最终效果不好不一定是模型的问题，有可能是你想要让模型人物唱的歌并不适合模型人物，比如模型训练了一个低音男歌手，你要让他去唱韩红的青藏高原，他必然唱不上去的，沙哑或跑调或直接刺啦声了。&lt;/li&gt;
  &lt;li&gt;无论训练的是歌手还是动漫人物，都涉及到侵权问题，请慎重传播。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;环境配置&quot;&gt;环境配置&lt;/h2&gt;

&lt;p&gt;首先确保本机已经安装好Python3.+的开发环境，这里我使用的是python3.9.0，随后使用Git命令克隆项目：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/svc-develop-team/so-vits-svc.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;随后进入项目的目录：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd so-vits-svc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;接着安装依赖，如果是Linux或者Mac系统，运行命令：&lt;/p&gt;

&lt;p&gt;pip3 install -r requirements.txt&lt;/p&gt;

&lt;p&gt;依赖库安装成功之后，在项目的根目录运行命令，启动服务：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python webUI.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;安装 wget&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew install wget
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget --version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;预先下载的模型文件,1.3G,需要一点时间。  &lt;br /&gt;
根目录下&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget -P pretrain/ http://obs.cstcloud.cn/share/obs/sankagenkeshi/checkpoint_best_legacy_500.pt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;由于mac坑太多，且存在诸多不便，台式机安排上。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/20230516/1.jpg&quot; alt=&quot;&quot; width=&quot;45%&quot; /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/20230516/2.jpg&quot; alt=&quot;&quot; width=&quot;45%&quot; /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
</description>
      <pubDate>Tue, 16 May 2023 00:00:00 +0800</pubDate>
      <link>http://localhost:4000/2023/05/AI%E8%AF%AD%E9%9F%B3mac%E8%B8%A9%E5%9D%91%E8%AE%B0/</link>
      <guid isPermaLink="true">http://localhost:4000/2023/05/AI%E8%AF%AD%E9%9F%B3mac%E8%B8%A9%E5%9D%91%E8%AE%B0/</guid>
        
      <category>技术_AI语音</category>
        
        
    </item>
    
    <item>
      <title>ChatGPT</title>
      <description>&lt;h3 id=&quot;吾心光明-亦复何言&quot;&gt;吾心光明 亦复何言?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;量变产生质变，chatGPT的质变是什么呢？&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;chatGPT 网页版网址 &lt;a href=&quot;https://chat.openai.com/&quot;&gt;https://chat.openai.com/&lt;/a&gt;&lt;br /&gt;
一些输入文本（prompt）&lt;a href=&quot;https://github.com/f/awesome-chatgpt-prompts&quot;&gt;https://github.com/f/awesome-chatgpt-prompts&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;使用技巧&quot;&gt;使用技巧&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;万能 prompt&lt;/strong&gt;&lt;br /&gt;
我想请你XXX（做某一件事），请问我应该如何向你提问才能得到最满意的答案，请提供全面、详细的建议，针对每一个建议请你提供具体的提问范例，注意这些范例都是关于如何向你提问获取做这件事的建议的，最后根据你所有的建议，再综合提供一个总的提问范例，注意这个范例必须同时体现你所有的建议。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;搜索图片 prompt（本质是返回图片网站的搜索结果，示例使用的是 Unsplash API，并且受限于ChatGPT的约束，比如 不能提供或生成具有性别、种族、外貌等方面的特定照片。 ）&lt;/strong&gt;&lt;br /&gt;
从现在起, 当你想发送一张图片时，请使用 Markdown，并且不要有反斜线，不要用代码块。
使用 Unsplash API (https://source.unsplash.com/1280x720/? &amp;lt; PUT YOUR QUERY HERE &amp;gt;)。&lt;/p&gt;

&lt;h2 id=&quot;使用示例&quot;&gt;使用示例&lt;/h2&gt;

&lt;p&gt;1,&lt;br /&gt;
&lt;img src=&quot;/images/posts/chatGPT/1.png&quot; alt=&quot;&quot; width=&quot;65%&quot; /&gt;&lt;br /&gt;
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;2,
&lt;img src=&quot;/images/posts/chatGPT/2.png&quot; alt=&quot;&quot; width=&quot;65%&quot; /&gt; &lt;br /&gt;
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;3,
&lt;img src=&quot;/images/posts/chatGPT/3.png&quot; alt=&quot;&quot; width=&quot;65%&quot; /&gt; &lt;br /&gt;
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;4,
&lt;img src=&quot;/images/posts/chatGPT/4.png&quot; alt=&quot;&quot; width=&quot;65%&quot; /&gt; &lt;br /&gt;
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;5,
&lt;img src=&quot;/images/posts/chatGPT/5.png&quot; alt=&quot;&quot; width=&quot;65%&quot; /&gt; &lt;br /&gt;
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;6,
&lt;img src=&quot;/images/posts/chatGPT/6.png&quot; alt=&quot;&quot; width=&quot;65%&quot; /&gt; &lt;br /&gt;
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;工作原理&quot;&gt;工作原理&lt;/h2&gt;

&lt;p&gt;ChatGPT的最大特点是它是一个可以用自然语言（人类的语言）来发出指令的人工智能。
虽然以前也有可以直接对话的AI，如智能音箱等，但它们无法进行灵活的对话。
与这些设备相比，当前的语言生成AI性能得到了飞跃式的提升，已经达到了实用水平。&lt;/p&gt;

&lt;p&gt;然而，这并不意味着你可以随意提问。 在提问时，需要一些巧妙的技巧。
网上有不少文章指出，尝试使用ChatGPT后得到的回答质量较低，但很可能大部分原因是没有充分发挥ChatGPT的潜在能力。
事实上，它的能力比大多数人预期的要高得多。&lt;/p&gt;

&lt;p&gt;首先，考虑一下要问什么问题。
根据提问的内容，它有时会夹杂一些虚假信息。&lt;/p&gt;

&lt;p&gt;为什么呢？驱动ChatGPT的引擎是大型语言模型（LLM）。
LLM虽然是一个“听人类的话并用人类的话回应”的机器，但并没有智慧或思考能力。
它收集了大约5万亿个单词的大量数据，然后从这些数据中进行学习，并给出学习结果。
基本上，它是根据前面的句子预测概率最高的“接下来”的内容并输出，这是一个非常简单的机制。
例如，当听到“很久以前”的话，它会接着说“在一个地方”，这样应该更容易理解。
实际上，在学习过程之后，人类还需要手动进行各种调试，但其根本仍然是一个基于概率进行回答的机器。&lt;/p&gt;

&lt;p&gt;也就是说，它并不是在记忆互联网上的信息并输出。
当询问关于小众知识的问题时，ChatGPT有时会给出错误的信息。&lt;/p&gt;

&lt;p&gt;根据上述讨论，提高回答准确性的方法如下。
由于LLM的学习数据问题，即使询问同样的问题，使用英语得到的答案会更准确。
这是因为在学习数据中英语占据了绝大多数。
此外，如果事先准备了较为精准的数据，让AI进行处理，可以期待更高的准确性。
例如，收集有关某个人物的事实信息，将其以条目形式输入ChatGPT。 然后，请求：“请根据这些内容撰写一个关于该人物的介绍。”
这样，ChatGPT几乎不会出现事实错误，而会为我们撰写出最合适的介绍文章。
输入长篇文章并让其进行总结也是一个好方法。&lt;/p&gt;

&lt;p&gt;要提高ChatGPT的精确度，关键在于巧妙地设计输入文本（prompt）。
尽量具体地提问，并附上一些条件。 举个例子，假设你希望ChatGPT为你想出一个有趣的产品方案。
此时，如果你仅仅命令它“请想一个有趣的产品方案”，那么它很可能给出一个模糊的答案。
但是，如果你这样命令：“你是一家广告代理公司的营销部门主管。请为即将发布的新饮料提出最佳方案。限制条件是…”，那么生成的答案就更可能包含广告代理公司的营销部门主管可能会考虑的饮料方案，而且会是一个高质量的方案，其中还可能包含更多专业术语和知识。简而言之，需要为AI设定角色，并给出具体指令。&lt;/p&gt;

&lt;p&gt;接下来，可以设定一些限制条件，例如：“字数约为300字”，“中学生也能理解”，“简洁的文章”等。然后输入与AI生成答案相关的文本。
可以使用“#”等符号将命令和限制条件与输入文本分开。 为什么这样可以提高精度呢？
简单来说，不使用prompt的情况下利用ChatGPT类似于在充满各种信息的互联网上盲目搜索特定内容。 因此，通过prompt逐步缩小搜索范围，这种格式就变得非常有效。
所以，不要在一次交流中结束，而是多次对话，以提高准确性。&lt;/p&gt;

&lt;p&gt;另一个值得一提的方法是分阶段生成输出。
正如前面所提到的，语言生成AI是基于概率生成最可能的答案。
因此，逐步展开逻辑更容易提高输出质量。
让AI分阶段思考，逐渐靠近所需答案。
例如，如果最终目标是撰写一篇关于ChatGPT的文章，那么不要用一个提示就让AI立即写文章，而是让AI分步进行： 1. 提出企画； 2. 制作结构； 3. 针对2的结果进行审查； 4. 根据3的结果实际编写文章。
通过这样的过程，最终生成的文章将更加精确。&lt;/p&gt;

&lt;p&gt;简单来说，与ChatGPT的沟通越接近人类之间高效的沟通方式，ChatGPT的准确性就越高。
这些方法其实是大家应该已经熟知的。
在与AI的交流中，将其视为虚拟的下属或助手是非常重要的。
通过明确角色、给出具体指令、设定限制条件以及多次对话和分阶段生成输出，我们可以充分利用ChatGPT的能力，从而提高它在回答问题和生成内容时的准确性。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
转载请注明：&lt;a href=&quot;http://yuqianglianshou.com&quot;&gt;劉清揚的博客&lt;/a&gt; » &lt;a href=&quot;http://yuqianglianshou.com/2023/03/ChatGPT/&quot;&gt; ChatGPT &lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
</description>
      <pubDate>Thu, 23 Mar 2023 00:00:00 +0800</pubDate>
      <link>http://localhost:4000/2023/03/ChatGPT/</link>
      <guid isPermaLink="true">http://localhost:4000/2023/03/ChatGPT/</guid>
        
      <category>技术</category>
        
        
    </item>
    
    <item>
      <title>斗地主出牌系列概率计算_地主方</title>
      <description>&lt;h3 id=&quot;而立之年已然难以专注的做一些事情如此用喜欢的数学做一些想知道的事情重新培养专注力&quot;&gt;而立之年，已然难以专注的做一些事情，如此，用喜欢的数学，做一些想知道的事情。重新培养专注力。&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt; 
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1求解手牌无王农民中有王炸的概率-答4848&quot;&gt;&lt;strong&gt;1，求解：手牌无王，农民中有王炸的概率？ 答：48.48%&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;分析：&lt;br /&gt;
农民甲、乙具有相同的组合概率，故只需求一人然后乘以2即可。
设大小王为 X牌，其它牌为 T牌。   &lt;br /&gt;
总牌数54张，去除已知手牌20张，牌堆剩余34张，其中 X牌 = 2张，T牌 = 34-2=32张，&lt;br /&gt;
农民甲手牌所有的组合数为 34！/17！，&lt;/p&gt;

&lt;p&gt;王炸在农民甲手中的组合数为 32！/15！，   &lt;br /&gt;
农民甲有王炸的概率为  32！/15！/（34！/17！）=8/33,&lt;br /&gt;
所以 手牌无王，农民中有王炸的概率 为 8/33 * 2 = 0.4848484848，大概 48.48%&lt;/p&gt;

&lt;h2 id=&quot;2求解手牌断一张普通牌农民中刚好有炸弹的概率-答1026&quot;&gt;&lt;strong&gt;2，求解：手牌断一张普通牌，农民中刚好有炸弹的概率？ 答：10.26%&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;分析：&lt;br /&gt;
农民甲、乙具有相同的组合概率，故只需求一人然后乘以2即可。&lt;br /&gt;
设断张为 X牌，其它牌为 T牌。   &lt;br /&gt;
总牌数54张，去除已知手牌20张，牌堆剩余34张，其中 X牌 = 4张，T牌 = 34-4=30张，&lt;br /&gt;
农民甲手牌所有的组合数为 34！/17！，&lt;/p&gt;

&lt;p&gt;炸弹在农民甲手中的组合数为 30！/13！，   &lt;br /&gt;
农民甲有炸弹的概率为  30！/13！/（34！/17！）=35/682,&lt;br /&gt;
所以 手牌断一张普通牌，农民中刚好有炸弹的概率 为 35/682 * 2 = 0.1026392961，大概 10.26%&lt;/p&gt;

&lt;h2 id=&quot;3求解手牌断两张普通牌农民中至少有一个炸弹的概率-答2026&quot;&gt;&lt;strong&gt;3，求解：手牌断两张普通牌，农民中至少有一个炸弹的概率？ 答：20.26%&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;分析：&lt;br /&gt;
农民甲、乙具有相同的组合概率，故只需求一人然后乘以2即可。&lt;br /&gt;
设断张为 X牌，Y牌，其它牌为 T牌。   &lt;br /&gt;
总牌数54张，去除已知手牌20张，牌堆剩余34张，其中 X牌 = 4张，Y牌 = 4张，T牌 = 34-4-4=26张，&lt;br /&gt;
农民甲手牌所有的组合数为 34！/17！，&lt;/p&gt;

&lt;p&gt;X炸弹在农民甲手中的组合数为 30！/13！，   &lt;br /&gt;
Y炸弹在农民甲手中的组合数为 30！/13！，   &lt;br /&gt;
X炸弹和Y炸弹同时都在农民甲手中的组合数为 26！/9！，&lt;br /&gt;
则农民甲至少有一个炸弹的组合数为 30！/13！+30！/13！- 26！/9！， &lt;br /&gt;
农民甲至少有一个炸弹的概率为  （30！/13！+30！/13！- 26！/9！）/（34！/17！）=35/682 * 2 - 65/48546 = 0.1026392961 - 0.0013389362 = 0.1013,&lt;br /&gt;
所以 手牌断两张普通牌，农民中至少有一个炸弹的概率 为 0.1013 * 2 = 0.2026，大概 20.26%&lt;/p&gt;

&lt;p&gt;顺便得到 手牌断两张普通牌，农民有两个炸弹，且炸弹在一家的概率 为 65/48546 * 2 = 0.26%&lt;/p&gt;

&lt;p&gt;&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
转载请注明：&lt;a href=&quot;http://yuqianglianshou.com&quot;&gt;劉清揚的博客&lt;/a&gt; » &lt;a href=&quot;http://yuqianglianshou.com/2023/01/斗地主_出牌系列概率计算_地主方/&quot;&gt; 斗地主出牌系列概率计算_地主方 &lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
</description>
      <pubDate>Tue, 03 Jan 2023 00:00:00 +0800</pubDate>
      <link>http://localhost:4000/2023/01/%E6%96%97%E5%9C%B0%E4%B8%BB_%E5%87%BA%E7%89%8C%E7%B3%BB%E5%88%97%E6%A6%82%E7%8E%87%E8%AE%A1%E7%AE%97_%E5%9C%B0%E4%B8%BB%E6%96%B9/</link>
      <guid isPermaLink="true">http://localhost:4000/2023/01/%E6%96%97%E5%9C%B0%E4%B8%BB_%E5%87%BA%E7%89%8C%E7%B3%BB%E5%88%97%E6%A6%82%E7%8E%87%E8%AE%A1%E7%AE%97_%E5%9C%B0%E4%B8%BB%E6%96%B9/</guid>
        
      <category>斗地主中的排列组合分析</category>
        
        
    </item>
    
    <item>
      <title>斗地主补牌系列概率计算</title>
      <description>&lt;h3 id=&quot;而立之年已然难以专注的做一些事情如此用喜欢的数学做一些想知道的事情重新培养专注力&quot;&gt;而立之年，已然难以专注的做一些事情，如此，用喜欢的数学，做一些想知道的事情。重新培养专注力。&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt; 
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1求解手牌无王底牌中出现王炸的概率-答045&quot;&gt;&lt;strong&gt;1，求解：手牌无王，底牌中出现王炸的概率？ 答：0.45%&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;分析：&lt;br /&gt;
设大小王为 X牌，其它牌为 T牌。  &lt;br /&gt;
则满足条件的底牌组合为 X X T， &lt;br /&gt;
总牌数54张，去除已知手牌17张，牌堆剩余37张，其中 X牌 = 2张，T牌 = 37-2=35张，&lt;br /&gt;
所以满足条件的组合数为 2*1/(2*1)*35 = 35种，&lt;br /&gt;
底牌所有的组合数为 37*36*35/（3*2*1）=7770种，&lt;br /&gt;
所以 底牌中出现王炸的概率 为 35/7770=0.0045045045，大概 0.45%。&lt;/p&gt;

&lt;p&gt;同理，底牌存在一张王的组合为 X T T，&lt;br /&gt;
满足 X T T 的组合数为 2*35*34/（2*1） = 1190种，&lt;br /&gt;
则 底牌中只出现一张王的概率 为 1190/7770=0.1531531531，大概 15.32%。&lt;/p&gt;

&lt;p&gt;同理，底牌不存在王的组合为 T T T，&lt;br /&gt;
满足 T T T 的组合数为 35*34*33/(3*2*1) = 6545种，&lt;br /&gt;
则 底牌中没有王的概率 为 6545/7770=0.8423423423，大概 84.23%。&lt;/p&gt;

&lt;h2 id=&quot;2求解手牌中有一张王底牌补成王炸概率-答811&quot;&gt;&lt;strong&gt;2，求解：手牌中有一张王，底牌补成王炸概率？ 答：8.11%&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;分析：&lt;br /&gt;
设王牌为 X牌，其它牌为 T牌。  &lt;br /&gt;
则满足条件的底牌组合为 X T T， &lt;br /&gt;
总牌数54张，去除已知手牌17张，牌堆剩余37张，其中 X牌 = 1张，T牌 = 37-1=36张，&lt;br /&gt;
所以满足条件的组合数为 1*36*35/(2*1) = 630种，&lt;br /&gt;
底牌所有的组合数为 37*36*35/（3*2*1）=7770种，&lt;br /&gt;
所以 手牌种有一张王，底牌补成王炸概率 为 1260/7770=0.0810810810，大概 8.11%。&lt;/p&gt;

&lt;h2 id=&quot;3求解底牌中出现某普通牌断张的概率-答2978&quot;&gt;&lt;strong&gt;3，求解：底牌中出现某普通牌断张的概率？ 答：29.78%&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;分析：&lt;br /&gt;
设需要的断张牌为 X牌，其它牌为 T牌。  &lt;br /&gt;
则满足条件的底牌组合有 X T T，X X T，X X X 三种，而不满足条件的为T T T 一种，&lt;br /&gt;
显然求不满足的 T T T 组合要简单一些，&lt;br /&gt;
总牌数54张，去除已知手牌17张，牌堆剩余37张，其中 X牌 = 4张，T牌 = 37-4=33张，&lt;br /&gt;
则 T T T 组合数为 33*32*31/（3*2*1） = 5456种，&lt;br /&gt;
底牌所有的组合数为 37*36*35/（3*2*1）=7770种，&lt;br /&gt;
T T T 组合概率为 5456/7770=0.7021879021，&lt;br /&gt;
所以 底牌中出现某普通牌断张的概率 为 1-0.7021879021=0.2978120979，大概 29.78%。&lt;/p&gt;

&lt;p&gt;顺便我们求一下，&lt;br /&gt;
X T T 的组合数为 4*33*32/（2*1）= 2112种，&lt;br /&gt;
2112/7770 = 0.2718146718，大概27.18%；&lt;/p&gt;

&lt;p&gt;X X T 的组合数为 4*3/（2*1）*33 = 198种，&lt;br /&gt;
198/7770 = 0.0254826254，大概2.55%；&lt;/p&gt;

&lt;p&gt;X X X 的组合数为 4*3*2/（3*2*1） = 4种，&lt;br /&gt;
4/7770 = 0.0005148005，大概0.05%；&lt;/p&gt;

&lt;p&gt;所以得出结论：&lt;br /&gt;
底牌中只出现一张某普通牌断张的概率为 27.18%，&lt;br /&gt;
底牌中只出现两张某普通牌断张的概率为 2.55%，&lt;br /&gt;
底牌三张都是某普通牌断张的概率为 0.05%。&lt;/p&gt;

&lt;h2 id=&quot;4求解底牌中出现某两张普通牌断张的概率-答721&quot;&gt;&lt;strong&gt;4，求解：底牌中出现某两张普通牌断张的概率？ 答：7.21%&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;分析： 
设需要的断张牌为 X牌，Y牌；设 P牌 为任意牌。&lt;br /&gt;
则满足条件的底牌组合为 X Y P，&lt;br /&gt;
总牌数54张，去除已知手牌17张，牌堆剩余37张，其中 X牌 = 4张，Y牌 = 4张，P牌 = 37-1-1=35张，&lt;br /&gt;
取一张为X的可能性 有4种，&lt;br /&gt;
取一张为Y的可能性 有4种，&lt;br /&gt;
取一张为P的可能性 有35种，&lt;br /&gt;
所以满足条件的组合数为 4*4*35=560种，&lt;br /&gt;
底牌所有的组合数为 37*36*35/（3*2*1）=7770种，&lt;br /&gt;
所以 底牌中出现某两张普通牌断张的概率 为 560/7770=0.0720720720，大概7.21%。&lt;/p&gt;

&lt;h2 id=&quot;5求解底牌中出现某三张普通牌断张的概率-答082&quot;&gt;&lt;strong&gt;5，求解：底牌中出现某三张普通牌断张的概率？ 答：0.82%&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;分析： 
设需要的断张牌为 X牌，Y牌，Z牌。&lt;br /&gt;
则满足条件的底牌组合为 X Y Z，&lt;br /&gt;
总牌数54张，去除已知手牌17张，牌堆剩余37张，其中 X牌 = 4张，Y牌 = 4张，Z牌 = 4张，&lt;br /&gt;
取一张为X的可能性 有4种，&lt;br /&gt;
取一张为Y的可能性 有4种，&lt;br /&gt;
取一张为Z的可能性 有4种，&lt;br /&gt;
所以满足条件的组合数为 4*4*4=64种， &lt;br /&gt;
底牌所有的组合数为 37*36*35/（3*2*1）=7770种， &lt;br /&gt;
所以 底牌中出现某两张普通牌断张的概率 为 64/7770=0.0082368082，大概0.82%。&lt;/p&gt;

&lt;h2 id=&quot;6求解手牌中有一张王三个2底牌补成双王四个2的概率-答045&quot;&gt;&lt;strong&gt;6，求解：手牌中有一张王，三个2，底牌补成双王四个2的概率？ 答：0.45%&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;分析：&lt;br /&gt;
显然，剩余37张牌中只有一个王，一个2，35张其它牌，&lt;/p&gt;

&lt;p&gt;所以满足条件的组合数为 1*1*35 = 35种，&lt;br /&gt;
底牌所有的组合数为 37*36*35/（3*2*1）=7770种，&lt;/p&gt;

&lt;p&gt;所以 手牌中有一张王，三个2，底牌补成双王四个2的概率 为 35/7770=0.0045045045，大概 0.45%。&lt;/p&gt;

&lt;h2 id=&quot;7求解手牌中有一个三带底牌补成炸弹的概率-答811&quot;&gt;&lt;strong&gt;7，求解：手牌中有一个三带，底牌补成炸弹的概率？ 答：8.11%&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;分析：&lt;br /&gt;
设此三带的牌为 X牌，其它牌为 T牌。
则满足条件的底牌组合为 X T T，&lt;/p&gt;

&lt;p&gt;总牌数54张，去除已知手牌17张，牌堆剩余37张，其中 X牌 = 1张，T牌 = 36张，&lt;br /&gt;
所以满足X T T的组合数为 1*36*35 /（2*1）= 630种，&lt;br /&gt;
底牌所有的组合数为 37*36*35/（3*2*1）=7770种，&lt;/p&gt;

&lt;p&gt;所以 手牌中有一个三带，底牌补成炸弹的概率 为 630/7770=0.0810810810，大概 8.11%。&lt;/p&gt;

&lt;h2 id=&quot;8求解手牌中有两个三带底牌至少补一个炸弹的概率-答1577&quot;&gt;&lt;strong&gt;8，求解：手牌中有两个三带，底牌至少补一个炸弹的概率？ 答：15.77%&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;分析：&lt;br /&gt;
设两个三带的牌为 X牌，Y牌，其它牌为 T牌。
则满足条件的底牌组合为 X Y T，X T T，Y T T，而不满足条件的底牌组合为 T T T，&lt;br /&gt;
我们不妨先求T T T。&lt;/p&gt;

&lt;p&gt;总牌数54张，去除已知手牌17张，牌堆剩余37张，其中 X牌 = 1张，Y牌 = 1张，T牌 = 35张，&lt;br /&gt;
所以满足T T T的组合数为 35*34*33 /（3*2*1）= 6545种，&lt;br /&gt;
底牌所有的组合数为 37*36*35/（3*2*1）=7770种，&lt;br /&gt;
6545/7770=0.8423423423 （此为一个炸弹都没补上，大概为 84.23%）&lt;br /&gt;
所以 手牌中有两个三带，底牌至少补一个炸弹的概率 为 1-0.8423423423=0.1576576576，大概 15.77%。&lt;/p&gt;

&lt;p&gt;顺便，我们求一下：&lt;br /&gt;
组合 X Y T，即手牌中有两个三带，底牌补两个炸弹的概率 为 &lt;br /&gt;
组合数 1*1*35 = 35种，&lt;br /&gt;
35/7770=0.0045045045，大概 0.45%。&lt;/p&gt;

&lt;p&gt;组合 X T T 和 Y T T 的和，即手牌中有两个三带，底牌补上了且只补了一个炸弹的概率 为 &lt;br /&gt;
X T T 组合数 1*35*34/(2*1) = 595种，&lt;br /&gt;
Y T T 组合数 1*35*34/(2*1) = 595种，&lt;br /&gt;
（595+595）/7770=0.1531531531，大概 15.32%。&lt;/p&gt;

&lt;h2 id=&quot;9求解手牌中有三个三带底牌至少补一个炸弹的概率-答2299&quot;&gt;&lt;strong&gt;9，求解：手牌中有三个三带，底牌至少补一个炸弹的概率？ 答：22.99%&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;分析：&lt;br /&gt;
设三个三带的牌为 X牌，Y牌，Z牌，其它牌为 T牌。
底牌组合为&lt;br /&gt;
T T T &amp;gt; 这个组合代表底牌一个炸弹都没补上&lt;br /&gt;
X T T，Y T T，Z T T &amp;gt;  这三种组合之和代表底牌补上了且只补了一个炸弹&lt;br /&gt;
X Y T，X Z T，Y Z T &amp;gt;  这三种组合之和代表底牌补上了且只补了两个炸弹&lt;br /&gt;
X Y Z &amp;gt; 这个组合代表底牌补上了三个炸弹&lt;/p&gt;

&lt;p&gt;总牌数54张，去除已知手牌17张，牌堆剩余37张，其中 X牌 = 1张，Y牌 = 1张，Z牌 = 1张，T牌 = 37-1-1-1=34张，&lt;br /&gt;
底牌所有的组合数为 37*36*35/（3*2*1）=7770种，&lt;/p&gt;

&lt;p&gt;T T T 组合数 34*33*32/（3*2*1）= 5984种，&lt;br /&gt;
5984/7770=0.7701415701，大概 77.01%；&lt;/p&gt;

&lt;p&gt;X T T，Y T T，Z T T 组合数 1*34*33/(2*1) * 3 =1683种，&lt;br /&gt;
1683/7770=0.2166023166，大概 21.66%；&lt;/p&gt;

&lt;p&gt;X Y T，X Z T，Y Z T 组合数 1*1*34 * 3 =102种，&lt;br /&gt;
102/7770=0.0131274131，大概 1.31%；&lt;/p&gt;

&lt;p&gt;X Y Z 组合数 1*1*1 = 1种，&lt;br /&gt;
1/7770=0.0001287001，大概 0.01%；&lt;/p&gt;

&lt;p&gt;所以得出结论：&lt;br /&gt;
手牌中有三个三带，底牌一个炸弹都没补上的概率 为 77.01%，&lt;br /&gt;
手牌中有三个三带，底牌补上了且只补了一个炸弹的概率 为 21.66%，&lt;br /&gt;
手牌中有三个三带，底牌补上了且只补了两个炸弹的概率 为 1.31%，&lt;br /&gt;
手牌中有三个三带，底牌补上了三个炸弹的概率 为 0.01%，&lt;br /&gt;
手牌中有三个三带，底牌至少补一个炸弹的概率 为 1-77.01%=22.99%&lt;/p&gt;

&lt;h2 id=&quot;10求解手牌中有四个三带底牌至少补一个炸弹的概率-答2878&quot;&gt;&lt;strong&gt;10，求解：手牌中有四个三带，底牌至少补一个炸弹的概率？ 答：28.78%&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;分析：&lt;br /&gt;
设四个三带的牌为 X牌，Y牌，Z牌，J牌，其它牌为 T牌。
底牌组合为&lt;br /&gt;
T T T &amp;gt; 这个组合代表底牌一个炸弹都没补上&lt;br /&gt;
X T T，Y T T，Z T T，J T T &amp;gt;  这四种组合之和代表底牌补上了且只补了一个炸弹&lt;br /&gt;
X Y T，X Z T，X J T, Y Z T，Y J T, Z J T &amp;gt;  这六种组合之和代表底牌补上了且只补了两个炸弹&lt;br /&gt;
X Y Z， X Y J, X Z J, Y Z J &amp;gt; 这四种组合代表底牌补上了三个炸弹&lt;/p&gt;

&lt;p&gt;总牌数54张，去除已知手牌17张，牌堆剩余37张，其中 X牌 = 1张，Y牌 = 1张，Z牌 = 1张，J牌 = 1张，T牌 = 37-1-1-1-1=33张，&lt;br /&gt;
底牌所有的组合数为 37*36*35/（3*2*1）=7770种，&lt;/p&gt;

&lt;p&gt;T T T 组合数 33*32*31/（3*2*1）= 5456种，&lt;br /&gt;
5456/7770=0.7021879021，大概 70.22%；&lt;/p&gt;

&lt;p&gt;X T T，Y T T，Z T T，J T T 组合数 1*33*32/(2*1) * 4  =2112种，&lt;br /&gt;
2112/7770=0.2718146718，大概 27.18%；&lt;/p&gt;

&lt;p&gt;X Y T，X Z T，X J T, Y Z T，Y J T, Z J T 组合数 1*1*33 * 6 =198种，&lt;br /&gt;
198/7770=0.0254826254，大概 2.55%；&lt;/p&gt;

&lt;p&gt;X Y Z， X Y J, X Z J, Y Z J 组合数 1*1*1 * 4 = 4种，&lt;br /&gt;
4/7770=0.0005148005，大概 0.05%；&lt;/p&gt;

&lt;p&gt;所以得出结论：&lt;br /&gt;
手牌中有四个三带，底牌一个炸弹都没补上的概率 为 70.22%，&lt;br /&gt;
手牌中有四个三带，底牌补上了且只补了一个炸弹的概率 为 27.18%，&lt;br /&gt;
手牌中有四个三带，底牌补上了且只补了两个炸弹的概率 为 2.55%，&lt;br /&gt;
手牌中有四个三带，底牌补上了三个炸弹的概率 为 0.05%，&lt;br /&gt;
手牌中有四个三带，底牌至少补一个炸弹的概率 为 1-70.22%=29.78%&lt;/p&gt;

&lt;h2 id=&quot;11求解手牌中有五个三带底牌至少补一个炸弹的概率-答3616&quot;&gt;&lt;strong&gt;11，求解：手牌中有五个三带，底牌至少补一个炸弹的概率？ 答：36.16%&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;分析：&lt;br /&gt;
设五个三带的牌为 X牌，Y牌，Z牌，J牌，K牌，其它牌为 T牌。
底牌组合为&lt;br /&gt;
T T T &amp;gt; 这个组合代表底牌一个炸弹都没补上&lt;br /&gt;
X T T，Y T T，Z T T，J T T， K T T &amp;gt;  这五种组合之和代表底牌补上了且只补了一个炸弹&lt;br /&gt;
X Y T，X Z T，X J T, X K T， Y Z T，Y J T，Y K T, Z J T，Z K T，J K T &amp;gt;  这十种组合之和代表底牌补上了且只补了两个炸弹&lt;br /&gt;
X Y Z， X Y J, X Y K，X Z J, X Z K，X J K，Y Z J，Y Z K，Y J K，Z J K &amp;gt; 这十种组合代表底牌补上了三个炸弹&lt;/p&gt;

&lt;p&gt;总牌数54张，去除已知手牌17张，牌堆剩余37张，其中 X牌 = 1张，Y牌 = 1张，Z牌 = 1张，J牌 = 1张，K牌 = 1张，T牌 = 37-1-1-1-1-1=32张，&lt;br /&gt;
底牌所有的组合数为 37*36*35/（3*2*1）=7770种，&lt;/p&gt;

&lt;p&gt;T T T 组合数 32*31*30/（3*2*1）= 4960种，&lt;br /&gt;
4960/7770=0.6383526383，大概 63.84%；&lt;/p&gt;

&lt;p&gt;X T T，Y T T，Z T T，J T T， K T T 组合数 1*32*31/(2*1) * 5  =2480种，&lt;br /&gt;
2480/7770=0.3191763191，大概 31.92%；&lt;/p&gt;

&lt;p&gt;X Y T，X Z T，X J T, X K T， Y Z T，Y J T，Y K T, Z J T，Z K T，J K T 组合数 1*1*32 * 10 =320种，&lt;br /&gt;
320/7770=0.0411840411，大概 4.12%；&lt;/p&gt;

&lt;p&gt;X Y Z， X Y J, X Y K，X Z J, X Z K，X J K，Y Z J，Y Z K，Y J K，Z J K 组合数 1*1*1 * 10 = 10种，&lt;br /&gt;
10/7770=0.0012870012，大概 0.13%；&lt;/p&gt;

&lt;p&gt;所以得出结论：&lt;br /&gt;
手牌中有五个三带，底牌一个炸弹都没补上的概率 为 63.84%，&lt;br /&gt;
手牌中有五个三带，底牌补上了且只补了一个炸弹的概率 为 31.92%，&lt;br /&gt;
手牌中有五个三带，底牌补上了且只补了两个炸弹的概率 为 4.12%，&lt;br /&gt;
手牌中有五个三带，底牌补上了三个炸弹的概率 为 0.13%，&lt;br /&gt;
手牌中有五个三带，底牌至少补一个炸弹的概率 为 1-63.84%=36.16%&lt;/p&gt;

&lt;h2 id=&quot;12求解手牌中有五个三带和一个王底牌至少补一个炸弹的概率-答4215&quot;&gt;&lt;strong&gt;12，求解：手牌中有五个三带和一个王，底牌至少补一个炸弹的概率？ 答：42.15%&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;分析：&lt;br /&gt;
设五个三带的牌为 X牌，Y牌，Z牌，J牌，K牌，王为 L牌，其它牌为 T牌。
底牌组合为&lt;br /&gt;
T T T &amp;gt; 这个组合代表底牌一个炸弹都没补上&lt;br /&gt;
X T T，Y T T，Z T T，J T T， K T T，L T T &amp;gt;  这六种组合之和代表底牌补上了且只补了一个炸弹&lt;br /&gt;
X Y T，X Z T，X J T, X K T，X L T，Y Z T，Y J T，Y K T,Y L T，Z J T，Z K T，Z L T，J K T，J L T，K L T &amp;gt;  这十五种组合之和代表底牌补上了且只补了两个炸弹&lt;br /&gt;
X Y Z， X Y J, X Y K，X Y L，X Z J, X Z K，X Z L，X J K，X J L，X K L，Y Z J，Y Z K，Y Z L，Y J K，Y J L，Y K L，Z J K，Z J L，Z K L，J K L &amp;gt; 这二十种组合代表底牌补上了三个炸弹&lt;/p&gt;

&lt;p&gt;总牌数54张，去除已知手牌17张，牌堆剩余37张，其中 X牌 = 1张，Y牌 = 1张，Z牌 = 1张，J牌 = 1张，K牌 = 1张，L牌 = 1张，T牌 = 37-1-1-1-1-1-1=31张，&lt;br /&gt;
底牌所有的组合数为 37*36*35/（3*2*1）=7770种，&lt;/p&gt;

&lt;p&gt;T T T 组合数 31*30*29/（3*2*1）= 4495种，&lt;br /&gt;
4495/7770=0.5785070785，大概 57.85%；&lt;/p&gt;

&lt;p&gt;X T T，Y T T，Z T T，J T T， K T T，L T T 组合数 1*31*30/(2*1) * 6  =2790种，&lt;br /&gt;
2790/7770=0.3590733590，大概 35.91%；&lt;/p&gt;

&lt;p&gt;X Y T，X Z T，X J T, X K T，X L T，Y Z T，Y J T，Y K T,Y L T，Z J T，Z K T，Z L T，J K T，J L T，K L T 组合数 1*1*31 * 15 =465种，&lt;br /&gt;
465/7770=0.0598455598，大概 5.98%；&lt;/p&gt;

&lt;p&gt;X Y Z， X Y J, X Y K，X Y L，X Z J, X Z K，X Z L，X J K，X J L，X K L，Y Z J，Y Z K，Y Z L，Y J K，Y J L，Y K L，Z J K，Z J L，Z K L，J K L 组合数 1*1*1 * 20 = 20种，&lt;br /&gt;
20/7770=0.0025740025，大概 0.26%；&lt;/p&gt;

&lt;p&gt;所以得出结论：&lt;br /&gt;
手牌中有五个三带和一个王，底牌一个炸弹都没补上的概率 为 57.85%，&lt;br /&gt;
手牌中有五个三带和一个王，底牌补上了且只补了一个炸弹的概率 为 35.91%，&lt;br /&gt;
手牌中有五个三带和一个王，底牌补上了且只补了两个炸弹的概率 为 5.98%，&lt;br /&gt;
手牌中有五个三带和一个王，底牌补上了三个炸弹的概率 为 0.26%，&lt;br /&gt;
手牌中有五个三带和一个王，底牌至少补一个炸弹的概率 为 1-57.85%=42.15%&lt;/p&gt;

&lt;p&gt;&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
转载请注明：&lt;a href=&quot;http://yuqianglianshou.com&quot;&gt;劉清揚的博客&lt;/a&gt; » &lt;a href=&quot;http://yuqianglianshou.com/2023/01/斗地主_补牌系列概率计算/&quot;&gt; 斗地主补牌系列概率计算 &lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
</description>
      <pubDate>Mon, 02 Jan 2023 00:00:00 +0800</pubDate>
      <link>http://localhost:4000/2023/01/%E6%96%97%E5%9C%B0%E4%B8%BB_%E8%A1%A5%E7%89%8C%E7%B3%BB%E5%88%97%E6%A6%82%E7%8E%87%E8%AE%A1%E7%AE%97/</link>
      <guid isPermaLink="true">http://localhost:4000/2023/01/%E6%96%97%E5%9C%B0%E4%B8%BB_%E8%A1%A5%E7%89%8C%E7%B3%BB%E5%88%97%E6%A6%82%E7%8E%87%E8%AE%A1%E7%AE%97/</guid>
        
      <category>斗地主中的排列组合分析</category>
        
        
    </item>
    
  </channel>
</rss>
